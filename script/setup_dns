#!/usr/bin/env ruby
# 
#  setup_dns
#  slicehostAPI
#  
#  Created by Caius Durling on 2008-11-26.
#  Copyright 2008 Caius Durling. All rights reserved.
# 
#  Sets up records for a new domain
# 

require File.join(File.dirname(__FILE__) + "/../config/boot.rb")
require "optparse"
require "ostruct"

class OptParseArgs
  
  def self.parse( args )
    options = OpenStruct.new
    options.domain = ""
    options.ip_address = ""
    options.google_cname = ""
    options.google_mx = false
    options.quiet = false
    options.ttl = App::config["dns"]["ttl"] || 84600
    options.subdomains = []
        
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: ruby script/setup_dns [options]"

      opts.separator ""
      opts.separator "Specific options:"

      # Required Arg: Domain name
      opts.on("-d", "--domain DOMAIN", String, "Domain name") do | domain |
        options.domain = domain
      end
      
      # Required Arg: IP Address of slice
      opts.on("-i", "--ip-address IP_ADDRESS", String, "IP Address of the slice") do | ip |
        options.ip_address = ip
      end
            
      # Optional Arg: Google CNAME verification string
      opts.on("-gv", "--google-verify CNAMESTRING", String, "Google Verification String") do | google_cname |
        options.google_cname = google_cname
      end
      
      opts.on("-gm", "--gmail", "Google MX records") do | google_mx |
        options.google_mx = google_mx
      end
      
      # Optional Arg: TTL
      opts.on("-t", "--ttl [TTL]", Integer, "Time to Live for the records") do | ttl |
        options.ttl = ttl
      end
      
      # Optional Arg: subdomains
      opts.on("-s", "--subdomain SUBDOMAIN", String, "Additional Subdomain to add") do | subdomain |
        options.subdomains << subdomain
      end
      
      opts.separator ""
      opts.separator "Common options:"
      
      # Optional Arg: Run quietly
      opts.on("-q", "--quiet", "Run quietly (minimal output)") do | q |
        options.quiet = q
      end
      
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
      
      opts.on_tail("-v", "--version", "Show version") do
        puts APP_VERSION
        exit
      end
    end
    
    opts.parse!(args)
    options
  end
end

# Kick it all off
options = OptParseArgs.parse(ARGV)

# Check we have the needed options
if options.domain.empty? || options.ip_address.empty?
  puts "Error: Both domain and ip address are required flags"
  exit(1)
end

# Simply because they're used so 
# much and I'm lazy at typing.
domain = options.domain.periodify
@quiet = options.quiet

# See if the zone already exists
if Zone.find(:first, :params => {:origin => domain})
  puts "Error: Domain already exists in your control panel"
  exit(2)
end

##
## Creating the domain + core records
##

output "Creating domain: #{domain}"

# Zone is newâ€”create it
zone = Zone.create(:origin => domain, :ttl => options.ttl, :active => "Y")

output :created

# And now create the records
# Main A record
output "Creating main A record"
zone.create_record(
  :record_type => "A",
  :name        => domain,
  :data        => options.ip_address,
  :ttl         => options.ttl,
  :active      => "Y"
)
output :created

# www as a CNAME
output "Creating www CNAME record"
zone.create_record(
  :record_type => "CNAME",
  :name        => "www",
  :data        => domain,
  :ttl         => options.ttl,
  :active      => "Y"
)
output :created

# NS records
output "Creating NS records"
%w( ns1 ns2 ns3 ).each do |prefix|
  zone.create_record(
    :record_type => "NS",
    :name        => "#{prefix}.slicehost.com",
    :data        => domain,
    :ttl         => options.ttl,
    :active      => "Y"
  )
end
output :created

##
## Optional Subdomains
##

unless options.subdomains.empty?
  options.subdomains.each do |subdomain|
    output "Creating CNAME for #{subdomain}"
    zone.create_record(
      :record_type => "CNAME",
      :name        => subdomain,
      :data        => domain,
      :ttl         => options.ttl,
      :active      => "Y"
    )
    output :created
  end
end


##
## Optional Google Records
##

# See if we need to add the google verification record
unless options.google_cname.empty?
  output "Creating Google CNAME record"
  zone.create_record(
    :record_type => "CNAME",
    :name        => "#{options.google_cname}.#{domain}",
    :data        => "google.com",
    :ttl         => options.ttl,
    :active      => "Y"
  )
  output :created
end


# See if we need to add the google MX records
if options.google_mx
  output "Creating Google MX records"
  zone.create_record(
    :record_type => "MX",
    :name => domain,
    :data => "ASPMX.L.GOOGLE.COM.",
    :aux => 1,
    :ttl => options.ttl,
    :active => "Y"
  )
  
  zone.create_record(
    :record_type => "MX",
    :name => domain,
    :data => "ALT1.ASPMX.L.GOOGLE.COM.",
    :aux => 5,
    :ttl => options.ttl,
    :active => "Y"
  )
  
  zone.create_record(
    :record_type => "MX",
    :name => domain,
    :data => "ALT2.ASPMX.L.GOOGLE.COM.",
    :aux => 5,
    :ttl => options.ttl,
    :active => "Y"
  )
  
  zone.create_record(
    :record_type => "MX",
    :name => domain,
    :data => "ASPMX2.GOOGLEMAIL.COM.",
    :aux => 10,
    :ttl => options.ttl,
    :active => "Y"
  )
  
  zone.create_record(
    :record_type => "MX",
    :name => domain,
    :data => "ASPMX3.GOOGLEMAIL.COM.",
    :aux => 10,
    :ttl => options.ttl,
    :active => "Y"
  )
  output :created
end
